

import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
      Scanner scL=new Scanner(System.in);
      StudentGroup sg=new StudentGroup();
      System.out.println("Vvedite kol-vo ");
      int n=sc.nextInt();
      for(int j=0; j < n; j++){
          System.out.println("Vvedide adres");
          String f=scL.nextLine();
          System.out.println("Vvedide FIO");
          String ad=scL.nextLine();
          System.out.println("Vvedide fakult");
          String fak=scL.nextLine();
          System.out.println("Vvedide kurs");
          int kurs=sc.nextInt();
          System.out.println("Vvedide kol-vo ocenok");
          int k=sc.nextInt();
          int []m= new int[k];
          System.out.println("Vvedide ocenki");
          for(int i=0; i < k ; i++) m[i]=sc.nextInt();
       Student st= new Student(f, ad, fak, kurs, m);
       sg.add(st);
      }
        System.out.println("Kogo udal?");
        String f= scL.nextLine();
        sg.del(f);
        sg.print();
    }}
import java.util.Comparator;
public class Student implements Comparator<Student> {
    private String fio, adress, fakulty;
    private int kurs;
    private int [] marks;
    Student(String fio, String adress, String faculty, int kurs, int []marks){
        this.fio=fio;
        this.adress=adress;
        this.kurs=kurs;
        this.marks=marks;
    }
    Student(){
        fio="Ivanov";
        adress="Kras";
        fakulty="FKT";
        kurs=2;
        marks=new int[5];
        for(int i=0; i <5; i++) marks[i]=3;
    }
    String getFio(){
        return fio;
    }
    String getAdress(){
        return adress;
    }
    String getFaculty(){
        return fakulty;
    }
    int getKurs(){
        return kurs;
    }
    int [] getMarks(){
        return marks;
    }
    void setAdress(String adress){
        this.adress=adress;
    }
    void setFakulty(String fakulty){
        this.fakulty=fakulty;
    }
    void setKurs(int kurs){
        this.kurs=kurs;
    }
    void setMarks(int [] marks){
        this.marks=marks;
    }
    double sr(){
    double s=0;
    for(int i=0; i <marks.length; i++)
        s+=marks[i];
    return s/marks.length;
    }
    public String toString(){
        String s=" ";
        for(int i=0; i<marks.length; i++)
        {
            s+=String.valueOf(marks[i]);
            s+=" ";
        }
        return "Студент"+fio+"\nАдрес"+adress+"\nФакультет"+fakulty+"\nКурс" +kurs+"\nОценки"+s+"\n";    }
    public int compare(Student s1, Student s2){
        return s1.getKurs()-s2.getKurs();
    }
}


import java.util.*;
public class StudentGroup {
    ArrayList<Student>a;
    StudentGroup(){
        a=new ArrayList<Student>();
    }
    void add(Student s){
    a.add(s);}
    void del(String fio){
        int p=-1;
        for(int i=0; i < a.size(); i++)
            if(fio.equalsIgnoreCase(a.get(i).getFio())) p=i;
        if(p>-1){
            a.remove(p);
            System.out.println("Delete student" + fio);
        }
        else System.out.println("Not student");
    }
    void print(){
         for(int i=0; i < a.size(); i++) System.out.println(a.get(i).toString());
    }
}





import java.util.*;
public class List<Item> {
    private int kol;
    private ListItem<Item> first;
    private ListItem<Item> last;
    List(){
        kol=0;
        first=null;
        last = null;
    }
    List(Item data){
        first = last=new ListItem<Item>(data);
        kol=1;
    }
    public void add(Item data){
        ListItem<Item> li = new ListItem<Item>(data);
        li.setnext(null);
        if(kol>0){
            li.setprev(last);
            last.setnext(li);
        }
        else{
            first=li;
        }
        last=li;
        kol++;
    }
    public ListItem<Item> getfirst(){
        return first;
    }
    public ListItem<Item> getlast(){
        return last;
    }
    public int getquan(){
        return kol;
    }
    public ListItem<Item> get(int i){
        if(i>kol){
            return null;
        }
        else{
            ListItem<Item> li = first;
            for(int j=1; j <i; j++)
                li = li.getnext();

            return li;
        }
        void print(){
            ListItem<Item> li = first;
            while(li!=null){
                System.out.print(li.getData());
                Li=li.getNext();
            }
        }
    }
}






import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        Scanner l=new Scanner(System.in);
        System.out.println("Введите кол-во клиентов");
        int n=sc.nextInt();
        Base b=new Base();
        for(int i=0; i<n; i++) {
            System.out.println("Введите фамилию");
            String fio = l.nextLine();
            System.out.println("Введите адресс");
            String ad = l.nextLine();
            System.out.println("Введите  информацию о заккзе");
            String zak = l.nextLine();
            System.out.println("Введите номер телефона");
            int num = sc.nextInt();
            Client c = new Client(fio, ad, zak, num);
            b.add(c);
        }
        b.sortByFio();
        b.print();
        System.out.println("Кого удалить по фамилии?");
        String fio0=l.nextLine();
        b.del(fio0);
        b.print();
        System.out.println("Кого найти по номеру?");
        int num1=sc.nextInt();
        b.findByNum(num1);
    }
}

import java.util.Comparator;
class Client  {
    String fio;
    String adress;
    String zak;
    int tel;
    Client(String fio, String adress, String zak, int tel){
        this.fio=fio;
        this.adress=adress;
        this.zak=zak;
        this.tel=tel;
    }
    public String toString(){
        return "fio: "+fio+"\nadress: "+adress+"\nzakaz: "+zak+"\nphone: "+tel;
    }
    String getFio(){
         return fio;
    }
    String getAdress(){
        return adress;
    }
    int getNum(){
        return tel;
    }
    String getZak(){
        return zak;
    }
    public static Comparator<Client> FioComp=new Comparator<Client>(){
        public int compare(Client c1, Client c2){
            return c1.getFio().compareTo(c2.getFio());
        }
    };
    public static Comparator<Client> AdComp=new Comparator<Client>(){
        public int compare(Client c1, Client c2){
            return c1.getAdress().compareTo(c2.getAdress());
        }
    };
    public static Comparator<Client> ZakComp=new Comparator<Client>(){
        public int compare(Client c1, Client c2){
            return c1.getZak().compareTo(c2.getZak());
        }
    };
    public static Comparator<Client> NumComp=new Comparator<Client>(){
        public int compare(Client c1, Client c2){
            return c1.getNum()-c2.getNum();
        }
    };
}


import java.util.*;
public class Base {
    ArrayList<Client> c;
    Base(){
        c=new ArrayList<Client>();
    }
    void add(Client c1){
        c.add(c1);
    }
    void del(String fio){
        int p=-1;
        for(int i=0; i < c.size(); i++){
            if(fio.equalsIgnoreCase(c.get(i).getFio())) p=i;
        }
        if(p>-1){
            c.remove(p);
            System.out.println("Удален клиент с фамилией: "+fio);
        }
        else System.out.println("Такого клиента нет!");
    }
    void findByNum(int fio){
        int p=-1;
        for(int i=0; i < c.size(); i++){
            if(fio==c.get(i).getNum()) p=i;
        }
        if(p>-1){
            System.out.println(c.get(p).toString());
        }
        else System.out.println("Такого клиента нет!");
    }
    void sortByFio(){
        c.sort(Client.FioComp);
    }
    void sortByAd(){
        c.sort(Client.AdComp);
    }
    void sortByZak(){
        c.sort(Client.ZakComp);
    }
    void sortByNum(){
        c.sort(Client.NumComp);
    }
    void print(){
        for(int i=0; i<c.size(); i++)
            System.out.println(c.get(i).toString());
    }
}







import java.util.Iterator;
import java.util.Scanner;
import java.util.TreeSet;
public class MySet {
TreeSet<Integer>set;
MySet(TreeSet <Integer> set){
    this.set=set;
}
TreeSet<Integer> getSet(){
    return set;
}
void fillSet(){
    Scanner sc= new Scanner(System.in);
    System.out.println("Введите кол-во элементов");
    int x= sc.nextInt();
    while(x!=0){
        set.add(x);
        x=sc.nextInt();
    }}
    void print(){
        Iterator it=set.iterator();
        System.out.println("My set");
        while(it.hasNext()){
            System.out.println(it.next()+" ");
        }
        System.out.println();
    }
    MySet simple(){
        TreeSet <Integer> set1=new TreeSet<Integer>(set);
        Iterator <Integer> it=set1.iterator();
        while(it.hasNext()){
            int k=0;
            Integer x=it.next();
            for(int i=1; i<=x; i++)
                if(x%i==0) k++;
            if(k==2) it.remove();
            }
        return new MySet(set1);
}
MySet union(MySet a) {
    TreeSet <Integer> set1=a.getSet();
    TreeSet <Integer> res = new TreeSet<Integer>(set);
    Iterator <Integer> it=set1.iterator();
    while(it.hasNext()) res.add(it.next());
    return new MySet(res);

}
MySet peres(MySet a){
    TreeSet <Integer> set1=a.getSet();
    TreeSet <Integer> res = new TreeSet<Integer>();
    Iterator <Integer> it=set1.iterator();
    Iterator <Integer> it1=set.iterator();
    if(set1.size()>set.size()){
        while(it1.hasNext()) {
            if(set1.contains(it1.next()))
            res.add(it1.next());
        }
    }
    else{
        while(it.hasNext()) {
            Integer nextValue = it.next();
            if(set.contains(nextValue))
                res.add(nextValue); //ошибка NoSuchElementException 8 11 5 20 0     20 9 4 0
        }
    }

    return new MySet(res);
}
}



import java.util.*;
public class Main {
    public static void main(String[] args) {
        TreeSet <Integer> set = new TreeSet<Integer>();
        MySet myset = new MySet(set);
        myset.fillSet();
        myset.print();
        MySet simple = myset.simple();
        System.out.println("Новое множетсво");
        simple.print();
        TreeSet <Integer> s= new TreeSet<Integer>();
        MySet ms=new MySet(s);
        ms.fillSet();
        MySet union = myset.peres(ms);
        System.out.println("Объединение");
        union.print();
    }
}




интерфейс
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.util.*;
public class MyPanel extends JPanel{
    JLabel l1, l2, l3;
    JTextField f1, f2, f3;
    JButton button;
    MyPanel(){
        l1=new JLabel("1-е слагемое");
        add(l1);
        f1=new JTextField();
        f1.setColumns(10);//размер в символах 10
        add(f1);
        l2=new JLabel("2-е слагемое");
        add(l2);
        f2=new JTextField();
        f2.setColumns(10);//размер в символах 10
        add(f2);
        l3=new JLabel("Итого сумма");
        add(l3);
        f3=new JTextField();
        f3.setColumns(10);//размер в символах 10
        add(f3);
        button=new JButton("Вычислить");
        MyListener m= new MyListener();
        button.addActionListener(m);
        add(button);}
        class MyListener implements ActionListener{
            public void actionPerformed(ActionEvent e){
                int s1 =Integer.parseInt(f1.getText());
                int s2 =Integer.parseInt(f2.getText());
                int s3=s1+s2;
                f3.setText(String.valueOf(s3));
            }
        }
    }


import javax.swing.*;
import java.util.*;
public class MyFrame extends JFrame{
    MyFrame(){
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        MyPanel panel= new MyPanel();
        add(panel);
        setVisible(true);

    }
}
public class Graf {
    public static void main(String[] args){
        MyFrame frame = new MyFrame();
    }
}

оконный интерфейс индивидуалка
import java.util.*;
public class Base {
    ArrayList<Client> c;
    Base(){
        c=new ArrayList<Client>();
    }
    public void add(Client c1){
        c.add(c1);
    }
    /*new*/
    public ArrayList<Client> getClientBase() {
        return  c;
    };
    public Client getLast(){
        return c.get(c.size()-1);
    }
    /**/
    void del(String fio){
        int p=-1;
        for(int i=0; i < c.size(); i++){
            if(fio.equalsIgnoreCase(c.get(i).getFio())) p=i;
        }
        if(p>-1){
            c.remove(p);
            System.out.println("Удален клиент с фамилией: "+fio);
        }
        else System.out.println("Такого клиента нет!");
    }
    void findByNum(String fio){
        int p=-1;
        for(int i=0; i < c.size(); i++){
            if(fio.equals(c.get(i).getNum())) p=i;
        }
        if(p>-1){
            System.out.println(c.get(p).toString());
        }
        else System.out.println("Такого клиента нет!");
    }
    void sortByFio(){
        c.sort(Client.FioComp);
    }
    void sortByAd(){
        c.sort(Client.AdComp);
    }
    void sortByZak(){
        c.sort(Client.ZakComp);
    }
    void sortByNum(){
        c.sort(Client.NumComp);
    }
    void print(){
        for(int i=0; i<c.size(); i++)
            System.out.println(c.get(i).toString());
    }
}

import java.util.Comparator;
class Client  {
    String fio;
    String adress;
    String zak;
    String tel;
    Client(String fio, String adress, String zak, String tel){
        this.fio=fio;
        this.adress=adress;
        this.zak=zak;
        this.tel=tel;
    }
    public String toString(){
        return "fio: "+fio+"\nadress: "+adress+"\nzakaz: "+zak+"\nphone: "+tel;
    }
    String getFio(){
        return fio;
    }
    String getAdress(){
        return adress;
    }
    String getNum(){
        return tel;
    }
    String getZak(){
        return zak;
    }
    public static Comparator<Client> FioComp=new Comparator<Client>(){
        public int compare(Client c1, Client c2){
            return c1.getFio().compareTo(c2.getFio());
        }
    };
    public static Comparator<Client> AdComp=new Comparator<Client>(){
        public int compare(Client c1, Client c2){
            return c1.getAdress().compareTo(c2.getAdress());
        }
    };
    public static Comparator<Client> ZakComp=new Comparator<Client>(){
        public int compare(Client c1, Client c2){
            return c1.getZak().compareTo(c2.getZak());
        }
    };
    public static Comparator<Client> NumComp=new Comparator<Client>(){
        public int compare(Client c1, Client c2){
            return c1.getNum().compareTo(c2.getNum());
        }
    };
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import  java.awt.event.ActionEvent;
import  java.util.*;
public class MyPanel extends JPanel{
    private JTextField fio, adress, zak, tel;
    private JLabel fioL, adressL, zakL, telL;
    private ArrayList<JTextField>  textFields= new ArrayList<>( Arrays.asList( fio, adress, zak, tel));
    private ArrayList<JLabel> labels = new ArrayList<>(Arrays.asList(fioL, adressL, zakL, telL));
    private ArrayList<String> names = new ArrayList<>(Arrays.asList("ФИО", "адресс", "информация о заказе", "телефон"));
    private JButton deleteButton, addButton, sortButton;
    private JList list;
    DefaultListModel model;
    MyPanel()
    {
        Base base = new Base();
        for(int i = 0; i< textFields.size();i++)
        {
            labels.set(i, new JLabel(names.get(i)));
            add(labels.get(i));
            textFields.set(i, new JTextField());
            textFields.get(i).setColumns(5);
            add(textFields.get(i));
        }
        addButton = new JButton("Добавить");
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ListIterator<JTextField> it = textFields.listIterator();
                base.add(new Client(it.next().getText(),it.next().getText(),it.next().getText(),it.next().getText()));
                model.addElement(base.getLast());
                it = textFields.listIterator();
                while (it.hasNext()) it.next().setText("");
            }
        });
        add(addButton);

        deleteButton = new JButton("Удалить");
        deleteButton.addActionListener(e -> {
            int selectedIndex = list.getSelectedIndex();
            if (selectedIndex != -1) {
                base.del(String.valueOf(base.getClientBase().get(selectedIndex)));
                model.remove(selectedIndex);
            }
        });
        add(deleteButton);

        sortButton = new JButton("Отсортировать");
        sortButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                base.sortByFio();
                model = new DefaultListModel();
                for ( Client CG: base.getClientBase() ) model.addElement(CG);
                list.setModel(model);
            }
        });
        add(sortButton);

        model = new DefaultListModel<>();
        list = new JList(model);
        list.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        list.setLayoutOrientation(JList.HORIZONTAL_WRAP);
        JScrollPane listScroller = new JScrollPane(list);
        listScroller.setPreferredSize(new Dimension(250,80));

        add(list);



    }

}

import javax.swing.*;

public class MyFrame extends JFrame {
    public MyFrame()
    {
        setSize(800,600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        MyPanel panel = new MyPanel();
        add(panel);
        setVisible(true);
    }

}

public class Graf {
    public static void main(String[] args){
        MyFrame frame = new MyFrame();
    }
}
